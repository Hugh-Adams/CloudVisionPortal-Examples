# Copyright (c) 2016, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#   Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
#   Neither the name of Arista Networks nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

'''Script to create a spine switch unique device configuration including hostname, ip addresses and bgp peers'''

import jsonrpclib
from cvplibrary import Form
from cvplibrary import CVPGlobalVariables, GlobalVariableNames

MAXINTS = 6
BASENETWORK = '10.30.'
ASN = 65000

def buildmgmt():

  # To Test
  #CVPGlobalVariables.setNetElement( '00:00:00:00:00:01' ) # Replace this value with managed device's mac for testing

  ztp = CVPGlobalVariables.getValue(GlobalVariableNames.ZTP_STATE)
  ip = CVPGlobalVariables.getValue(GlobalVariableNames.CVP_IP)

  if ztp == 'true':
    username = CVPGlobalVariables.getValue(GlobalVariableNames.ZTP_USERNAME)
    password = CVPGlobalVariables.getValue(GlobalVariableNames.ZTP_PASSWORD)
  else:
    username = CVPGlobalVariables.getValue(GlobalVariableNames.CVP_USERNAME)
    password = CVPGlobalVariables.getValue(GlobalVariableNames.CVP_PASSWORD)

  url = 'https://%s:%s@%s/command-api' % (username, password, ip)
  ss = jsonrpclib.Server(url)

  intfs = ss.runCmds(1, ['enable', { 'cmd': 'show interfaces Management1' } ] )[1]
  mgmtip = intfs['interfaces']['Management1']['interfaceAddress'][0]['primaryIp']['address']
  mgmtMask = intfs['interfaces']['Management1']['interfaceAddress'][0]['primaryIp']['maskLen']

  print "interface Management 1"
  print "vrf forwarding mgmt"
  print "ip address %s/%s" % (mgmtip, mgmtMask)
  print "!"
  
def makeintfips(spine):
  last_octet = 0
  for int in range(1, (MAXINTS + 1)):
    intip = '%s%s.%s' % ( BASENETWORK, str(spine), str(last_octet))
    print 'interface Ethernet%s' % str(int)
    print 'no switchport'
    print 'ip address %s/31' % ( intip )
    print '!'
    last_octet += 2
    
def makebgppeers(spine):
  last_octet = 1
  incr = 0
  print 'router bgp %s' % str(ASN)
  for peer in range(1, (MAXINTS + 1)):
    peerip = '%s%s.%s' % (BASENETWORK, str(spine), str(last_octet))
    if peer % 2 != 0:
      incr += 1
    print 'neighbor %s remote-as %s' % (peerip, str(ASN + incr))
    last_octet += 2
    

def main():
  spine = Form.getFieldById('spine_number').getValue()
  print "hostname spine-%s" % str(spine)
  print "!"
  makeintfips(spine)
  makebgppeers(spine)
  buildmgmt()

if __name__ == "__main__":
   main()
