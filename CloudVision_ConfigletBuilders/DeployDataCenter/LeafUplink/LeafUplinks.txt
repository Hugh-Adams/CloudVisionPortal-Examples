# Copyright (c) 2016, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#   Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
#   Neither the name of Arista Networks nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

'''
    Script to build a unique device configuration including hostname, ip addresses, and bgp peers for a leaf switch.

    This script will also create the manangement interface configuration based on what's on the device when the builder
    runs.

'''

from cvplibrary import Form
import jsonrpclib
from cvplibrary import CVPGlobalVariables, GlobalVariableNames

SPINEWIDTH = 4
BASENETWORK = '10.30.'
BASEASN = 65000

def buildmgmt():
  
  # To Test set the below variable to an actual mac address
  # of a switch managed by cloudvision
  #
  #CVPGlobalVariables.setNetElement( '00:00:00:00:11:22' ) # set this to a mac address of a managed switch for testing
  ztp = CVPGlobalVariables.getValue(GlobalVariableNames.ZTP_STATE)
  ip = CVPGlobalVariables.getValue(GlobalVariableNames.CVP_IP)

  if ztp == 'true':
    username = CVPGlobalVariables.getValue(GlobalVariableNames.ZTP_USERNAME)
    password = CVPGlobalVariables.getValue(GlobalVariableNames.ZTP_PASSWORD)
  else:
    username = CVPGlobalVariables.getValue(GlobalVariableNames.CVP_USERNAME)
    password = CVPGlobalVariables.getValue(GlobalVariableNames.CVP_PASSWORD)

  url = 'https://%s:%s@%s/command-api' % (username, password, ip)
  ss = jsonrpclib.Server(url)

  intfs = ss.runCmds(1, ['enable', { 'cmd': 'show interfaces Management1' } ] )[1]
  mgmtip = intfs['interfaces']['Management1']['interfaceAddress'][0]['primaryIp']['address']
  mgmtMask = intfs['interfaces']['Management1']['interfaceAddress'][0]['primaryIp']['maskLen']

  print "interface Management 1"
  print "vrf forwarding mgmt"
  print "ip address %s/%s" % (mgmtip, mgmtMask)
  print "!"

def calcint(spine, sw):
   if sw.endswith('a'):
      subtractor = 3
   else:
      subtractor = 1
   intip = '%s%s.%s' % ( BASENETWORK, spine, (str((int(sw[0]) * 4) - subtractor)))
   return intip
   
def makeintfips(sw):
  for spine in range(1, (SPINEWIDTH+1)):
    intip = calcint(spine, sw)
    print 'interface Ethernet%s' % str(spine)
    print 'no switchport'
    print 'ip address %s/31' % intip
    print '!'
  
def calcpeer(spine, sw):
  if sw.endswith('a'):
    subtractor = 4
  else:
    subtractor = 2
  peerip = '%s%s.%s' % ( BASENETWORK, spine, (str((int(sw[0]) * 4) - subtractor)))
  return peerip
  
def makebgppeers(sw):
  asn = str(BASEASN + int(sw[0]))
  print 'router bgp %s' % asn
  for spine in range(1, (SPINEWIDTH+1)):
    peerip = calcpeer(spine, sw)
    print 'neighbor %s remote-as %s' % (peerip, str(BASEASN))

def main():
  sw = Form.getFieldById('sw').getValue()
  print "hostname leaf-%s" % str(sw)
  print "!"
  makeintfips(sw)
  makebgppeers(sw)
  buildmgmt()

if __name__ == "__main__":
   main()
